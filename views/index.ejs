<!DOCTYPE html>
<html>
  <head>
    <title>
      Three.js Tutorials by Sean Bradley : https://sbcode.net/threejs/
    </title>
    <link rel="stylesheet" href="/css/style.css" />

    <style>
      body {
        overflow: hidden;
        margin: 0px;
      }
    </style>
  </head>

  <body>
    <div class="museum-name">
      <h1>The Vivid Nature Collection</h1>
    </div>
    <script src="/scripts/three/three.min.js"></script>
    <script src="/scripts/three/GLTFloader.js"></script>
    <script src="/scripts/three/OrbitControls.js"></script>
    <script>
      const scene = new THREE.Scene();
      // scene.background = new THREE.Color(0xdddddd);
      scene.background = new THREE.Color(0xf0eda5);

      const camera = new THREE.PerspectiveCamera(
        40,
        window.innerWidth / window.innerHeight,
        1,
        5000
      );
      //   camera.rotation.y = (80 / 180) * Math.PI;
      //   camera.position.x = 400;
      //   camera.position.y = 80;
      camera.position.z = 25;
      camera.position.y = 0;
      //   camera.position.x = -2;
      //   const camera = new THREE.PerspectiveCamera(
      //     75,
      //     window.innerWidth / window.innerHeight
      //   );

      const hlight = new THREE.AmbientLight(0x090b0d, 100);
      scene.add(hlight);

      //   directionalLight = new THREE.DirectionalLight(0xffffff, 100);
      //   directionalLight.position.set(0, 1, 0);
      //   directionalLight.castShadow = true;
      //   scene.add(directionalLight);

      //   light = new THREE.PointLight(0xc4c4c4, 10);
      //   light.position.set(0, 300, 500);
      //   scene.add(light);
      //   light2 = new THREE.PointLight(0xc4c4c4, 10);
      //   light2.position.set(500, 100, 0);
      //   scene.add(light2);
      //   light3 = new THREE.PointLight(0xc4c4c4, 10);
      //   light3.position.set(0, 100, -500);
      //   scene.add(light3);
      //   light4 = new THREE.PointLight(0xc4c4c4, 10);
      //   light4.position.set(-500, 300, 500);
      //   scene.add(light4);

      const renderer = new THREE.WebGLRenderer({ antialias: true });
      renderer.setSize(window.innerWidth, window.innerHeight);
      document.body.appendChild(renderer.domElement);

      let controls = new THREE.OrbitControls(camera, renderer.domElement);
      controls.addEventListener("change", renderer);

      //   const geometry = new THREE.BoxGeometry(1, 1, 1);
      //   const material = new THREE.MeshBasicMaterial({ color: 0xff0000 });
      //   const cube = new THREE.Mesh(geometry, material);
      //   scene.add(cube);

      //   cube.position.z = -5;

      const loader = new THREE.GLTFLoader();
      loader.load("/scenes/scene.gltf", function (gltf) {
        museum = gltf.scene.children[0];
        // museum.scale.set(5, 5, 5);
        museum.rotation.z = (180 / 180) * Math.PI;
        museum.position.y = -3;
        scene.add(gltf.scene);
        // renderer.render(scene, camera);
        animate();
      });

      //PAINTINGS
      const geometry = new THREE.BoxGeometry(3.05, 1.9, 0.05);

      var image1 = new THREE.TextureLoader().load();
      var image2 = new THREE.TextureLoader().load();
      var image3 = new THREE.TextureLoader().load(
        "https://i.ibb.co/6Y3MTCM/product-500x500.jpg"
      );
      // var image1a = new THREE.TextureLoader().load(
      //   "https://img.staticmb.com/mbcontent//images/uploads/2020/7/What%20Kind%20of%20Paintings%20Does%20Your%20Home%20Need%20as%20per%20Vastu.jpg"
      // );
      var image1a = new THREE.TextureLoader().load(
        "/uploads/"
      );
      var image1b = new THREE.TextureLoader().load(
        "https://i.ibb.co/582QXk7/im2.jpg"
      );

      var image2a = new THREE.TextureLoader().load(
        "https://i.ibb.co/6Y3MTCM/product-500x500.jpg"
      );
      var image2b = new THREE.TextureLoader().load(
        "https://img.staticmb.com/mbcontent//images/uploads/2020/7/What%20Kind%20of%20Paintings%20Does%20Your%20Home%20Need%20as%20per%20Vastu.jpg"
      );

      var image3a = new THREE.TextureLoader().load(
        "https://i.ibb.co/582QXk7/im2.jpg"
      );
      var image3b = new THREE.TextureLoader().load(
        "https://img.staticmb.com/mbcontent//images/uploads/2020/7/What%20Kind%20of%20Paintings%20Does%20Your%20Home%20Need%20as%20per%20Vastu.jpg"
      );

      var image4a = new THREE.TextureLoader().load(
        "https://img.staticmb.com/mbcontent//images/uploads/2020/7/What%20Kind%20of%20Paintings%20Does%20Your%20Home%20Need%20as%20per%20Vastu.jpg"
      );
      var image4b = new THREE.TextureLoader().load(
        "https://i.ibb.co/6Y3MTCM/product-500x500.jpg"
      );

      var image5a = new THREE.TextureLoader().load(
        "https://img.staticmb.com/mbcontent//images/uploads/2020/7/What%20Kind%20of%20Paintings%20Does%20Your%20Home%20Need%20as%20per%20Vastu.jpg"
      );
      var image5b = new THREE.TextureLoader().load(
        "https://i.ibb.co/582QXk7/im2.jpg"
      );

      //FOR PAINTING DESCRIPTION

      var arr = [
        [
          "https://img.staticmb.com/mbcontent//images/uploads/2020/7/What%20Kind%20of%20Paintings%20Does%20Your%20Home%20Need%20as%20per%20Vastu.jpg",
          "https://i.ibb.co/582QXk7/im2.jpg",
        ],
        [
          "https://i.ibb.co/6Y3MTCM/product-500x500.jpg",
          "https://i.ibb.co/582QXk7/im2.jpg",
        ],
      ];
      var arr1 = [
        "https://img.staticmb.com/mbcontent//images/uploads/2020/7/What%20Kind%20of%20Paintings%20Does%20Your%20Home%20Need%20as%20per%20Vastu.jpg",
        "https://i.ibb.co/582QXk7/im2.jpg",
      ];
      var arr2 = [
        "https://i.ibb.co/6Y3MTCM/product-500x500.jpg",
        "https://i.ibb.co/582QXk7/im2.jpg",
      ];
      var textureToShow = 0;

      var material1 = new THREE.MeshBasicMaterial();
      material1.map = image1a;
      var material2 = new THREE.MeshBasicMaterial();
      material2.map = image2a;
      var material3 = new THREE.MeshBasicMaterial();
      material3.map = image3a;
      var material4 = new THREE.MeshBasicMaterial();
      material4.map = image4a;
      var material5 = new THREE.MeshBasicMaterial();
      material5.map = image5a;

      // var loader1 = new THREE.TextureLoader();

      // loader1.load(arr1[textureToShow], function (tex) {
      //   material1.map = tex;
      //   textureToShow++;
      // });

      // loader1.load(arr1[textureToShow], function (tex) {
      //   material1.map = tex;
      //   textureToShow++;
      // });

      const cube1 = new THREE.Mesh(geometry, material1);
      scene.add(cube1);
      cube1.position.set(7.82, -1.5, 2.9);
      cube1.rotation.y = (90 / 180) * Math.PI;

      var canvas = document.getElementsByTagName("canvas")[0];

      canvas.addEventListener("click", function () {
        console.log("CLicked " + textureToShow);
        // loader1.load(arr1[textureToShow], function (tex) {
        //   material1.map = tex;
        //   textureToShow++;
        //   if (textureToShow > arr.length - 1) {
        //     textureToShow = 0;
        //   }
        // });
        textureToShow++;
        if (textureToShow === 1) {
          console.log("1 true");
          material1.map = image1b;
          material2.map = image2b;
          material3.map = image3b;
          material4.map = image4b;
          material5.map = image5b;
        } else {
          console.log("0 true");
          material1.map = image1a;
          material2.map = image2a;
          material3.map = image3a;
          material4.map = image4a;
          material5.map = image5a;
        }
        console.log(material1);
        if (textureToShow > 1) textureToShow = 0;
      });

      //RIGHT WALL

      // const material1 = new THREE.MeshBasicMaterial({ map: image1 });
      const m2 = new THREE.MeshBasicMaterial({ map: image2 });

      const cube2 = new THREE.Mesh(geometry, material2);
      scene.add(cube2);
      cube2.position.set(7.82, -1.5, 6.3);
      cube2.rotation.y = (90 / 180) * Math.PI;

      const cube3 = new THREE.Mesh(geometry, material1);
      scene.add(cube3);
      cube3.position.set(7.82, -1.5, 9.7);
      cube3.rotation.y = (90 / 180) * Math.PI;

      const cube4 = new THREE.Mesh(geometry, material3);
      scene.add(cube4);
      cube4.position.set(7.82, -1.5, -3.0);
      cube4.rotation.y = (90 / 180) * Math.PI;

      const cube5 = new THREE.Mesh(geometry, material4);
      scene.add(cube5);
      cube5.position.set(7.82, -1.5, -6.4);
      cube5.rotation.y = (90 / 180) * Math.PI;

      const cube6 = new THREE.Mesh(geometry, material5);
      scene.add(cube6);
      cube6.position.set(7.82, -1.5, -9.8);
      cube6.rotation.y = (90 / 180) * Math.PI;

      //LEFT WALL

      const cube7 = new THREE.Mesh(geometry, material1);
      scene.add(cube7);
      cube7.position.set(-7.82, -1.5, 2.9);
      cube7.rotation.y = (90 / 180) * Math.PI;

      const cube8 = new THREE.Mesh(geometry, material2);
      scene.add(cube8);
      cube8.position.set(-7.82, -1.5, 6.3);
      cube8.rotation.y = (90 / 180) * Math.PI;

      const cube9 = new THREE.Mesh(geometry, material3);
      scene.add(cube9);
      cube9.position.set(-7.82, -1.5, 9.7);
      cube9.rotation.y = (90 / 180) * Math.PI;

      const cube10 = new THREE.Mesh(geometry, material4);
      scene.add(cube10);
      cube10.position.set(-7.82, -1.5, -1.0);
      cube10.rotation.y = (90 / 180) * Math.PI;

      const cube11 = new THREE.Mesh(geometry, material5);
      scene.add(cube11);
      cube11.position.set(-7.82, -1.5, -4.4);
      cube11.rotation.y = (90 / 180) * Math.PI;

      const cube12 = new THREE.Mesh(geometry, material1);
      scene.add(cube12);
      cube12.position.set(-7.82, -1.5, -7.8);
      cube12.rotation.y = (90 / 180) * Math.PI;

      //FRONT WALL

      const cube13 = new THREE.Mesh(geometry, material2);
      scene.add(cube13);
      cube13.position.set(-5.7, -1.5, -9.9);

      //   cube13.rotation.y = (90 / 180) * Math.PI;

      const cube14 = new THREE.Mesh(geometry, material3);
      scene.add(cube14);
      cube14.position.set(-2.2, -1.5, -9.9);

      const cube15 = new THREE.Mesh(geometry, material4);
      scene.add(cube15);
      cube15.position.set(1.3, -1.5, -9.9);

      function animate() {
        renderer.render(scene, camera);
        requestAnimationFrame(animate);
      }

      function loadingTexture() {}
    </script>
  </body>
</html>
